{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["API_KEY","updateCount","state","action","loading","count","App","useReducer","dispatch","onButtonClick","useCallback","a","countapi","hit","value","useEffect","get","className","disabled","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAMMA,G,MAAU,wCAEhB,SAASC,EAAYC,EAAOC,GAC1B,MAAsB,mBAAXA,EAA6B,2BAAKD,GAAZ,IAAmBE,QAASD,IAEtD,2BAAKD,GAAZ,IAAmBG,MAAOF,EAAQC,SAAS,IA4C9BE,MA9Bf,WAAgB,IAAD,EAC0BC,qBAAWN,EAAa,CAC3DI,MAAO,EACPD,SAAS,IAHA,0BACJC,EADI,EACJA,MAAOD,EADH,EACGA,QAAWI,EADd,KAKXC,EAAgBC,sBAAW,sBAAC,8BAAAC,EAAA,6DAC1BH,GAAS,GADiB,SAEFI,IAASC,IAAIb,GAFX,gBAElBc,EAFkB,EAElBA,MACRN,EAASM,GAHiB,2CAIzB,IASL,OAPAC,qBAAU,WACR,sBAAC,8BAAAJ,EAAA,sEACyBC,IAASI,IAAIhB,GADtC,gBACSc,EADT,EACSA,MACRN,EAASM,GAFV,0CAAD,KAIC,IAGD,qBAAKG,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,sDAAyBb,EAAU,YAAcC,EAAjD,OACA,wBAAQa,SAAUd,EAASe,QAASV,EAApC,iCCnCOW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.582a68b9.chunk.js","sourcesContent":["import { useCallback, useEffect, useReducer } from \"react\";\nimport countapi from \"countapi-js\";\n\nimport \"./App.css\";\n\n// NB: not a secret\nconst API_KEY = \"1ccb732e-b55a-4404-ad3f-0f99c02fe44e\";\n\nfunction updateCount(state, action) {\n  if (typeof action === \"boolean\") return { ...state, loading: action };\n\n  return { ...state, count: action, loading: false };\n}\n\n/**\n * The whole dang app. Big ball of mud, right?\n *\n * Not really. If you want to reuse the button styles, just add another\n * <button> element inside the `.App-header` and it will look just like the\n * existing one.\n *\n * If you want to track a second counter on the same page (why?) it is pretty\n * straightforward to copy the `useReducer` and `useCallback` invocations and\n * rename their return values as well.\n */\nfunction App() {\n  const [{ count, loading }, dispatch] = useReducer(updateCount, {\n      count: 0,\n      loading: true\n    }),\n    onButtonClick = useCallback(async () => {\n      dispatch(true);\n      const { value } = await countapi.hit(API_KEY);\n      dispatch(value);\n    }, []);\n\n  useEffect(() => {\n    (async () => {\n      const { value } = await countapi.get(API_KEY);\n      dispatch(value);\n    })();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>The current count is {loading ? \"loading..\" : count}.</p>\n        <button disabled={loading} onClick={onButtonClick}>\n          Increment it!\n        </button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}